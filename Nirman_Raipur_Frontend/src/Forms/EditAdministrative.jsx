import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate, useParams } from "react-router-dom";
import "./Form.css";
import TopBar from "../Components/TopBar.jsx";
import useAuthStore from '../Store/useAuthStore.js';
import { BASE_SERVER_URL } from '../constants.jsx';

export default function EditAdministrative({ onLogout }) {
  const navigate = useNavigate();
  const { workId } = useParams();

  // Get authentication from Zustand store
  const { token, isAuthenticated, logout } = useAuthStore();

  // Form state
  const [form, setForm] = useState({
    byGovtDistrictAS: "",
    approvalNumber: "",
    remarks: "",
    rejectionReason: "",
    document: null,
  });

  // Loading and error states
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [errors, setErrors] = useState({});
  const [existingApproval, setExistingApproval] = useState(null);

  useEffect(() => {
    document.title = "рдирд┐рд░реНрдорд╛рдг | рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдЕрдкрдбреЗрдЯ";

    console.log("ЁЯФН Component mounted with workId:", workId);
    console.log("ЁЯФН Authentication state:", { isAuthenticated, hasToken: !!token });

    if (!workId) {
      alert("рдХрд╛рд░реНрдп ID рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВред");
      navigate(-1);
      return;
    }

    // Check authentication on component mount
    if (!isAuthenticated || !token) {
      alert("рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдЖрд╡рд╢реНрдпрдХ рд╣реИред рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред");
      navigate("/login");
      return;
    }

    // Fetch existing administrative approval data
    fetchExistingApproval();
  }, [workId, navigate, isAuthenticated, token]);

  // Fetch existing administrative approval data
  const fetchExistingApproval = async () => {
    try {
      setIsLoading(true);
      console.log("ЁЯФН Fetching data for workId:", workId);

      const response = await axios.get(`${BASE_SERVER_URL}/work-proposals/${workId}`, {
        headers: {
          "Authorization": `Bearer ${token}`
        }
      });

      console.log("ЁЯУе Full API response:", response.data);
      console.log("ЁЯУе Administrative approval data:", response.data?.administrativeApproval);

      // тЬЕ FIXED: Better condition checking
    //   if (!response.data?.administrativeApproval) {
    //     console.log("тЭМ No administrativeApproval object found");
    //     alert("рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИред рдкрд╣рд▓реЗ рд╕реНрд╡реАрдХреГрддрд┐ рдмрдирд╛рдПрдВред");
    //     navigate(-1);
    //     return;
    //   }

      const adminApproval = response.data.administrativeApproval;
      console.log("ЁЯУК Administrative approval object:", adminApproval);

      // тЬЕ FIXED: Safeguard against undefined values
      const safeAdminApproval = {
        status: adminApproval?.status || null,
        byGovtDistrictAS: adminApproval?.byGovtDistrictAS || "",
        approvalNumber: adminApproval?.approvalNumber || "",
        remarks: adminApproval?.remarks || "",
        rejectionReason: adminApproval?.rejectionReason || "",
        approvalDate: adminApproval?.approvalDate || null,
        attachedFile: adminApproval?.attachedFile || null,
        createdAt: adminApproval?.createdAt || null
      };

      // Set existing approval data with safe values
      setExistingApproval(safeAdminApproval);

      // тЬЕ FIXED: Pre-populate form with safe values
      setForm(prev => ({
        ...prev,
        byGovtDistrictAS: safeAdminApproval.byGovtDistrictAS,
        approvalNumber: safeAdminApproval.approvalNumber,
        remarks: safeAdminApproval.remarks,
        rejectionReason: safeAdminApproval.rejectionReason,
      }));

      console.log("тЬЕ Form pre-populated with safe values:", {
        byGovtDistrictAS: safeAdminApproval.byGovtDistrictAS,
        approvalNumber: safeAdminApproval.approvalNumber,
        status: safeAdminApproval.status
      });

    } catch (error) {
      console.error("тЭМ Error fetching administrative approval:", error);
      console.error("ЁЯУН Full error details:", error.response || error);

      if (error.response?.status === 401) {
        alert("рдЖрдкрдХрд╛ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред");
        logout();
        navigate("/login");
      } else if (error.response?.status === 404) {
        alert("рдХрд╛рд░реНрдп рдкреНрд░рд╕реНрддрд╛рд╡ рдирд╣реАрдВ рдорд┐рд▓рд╛ред");
        navigate(-1);
      } else {
        alert("рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === "document") {
      setForm((prev) => ({ ...prev, document: files[0] }));
    } else {
      setForm((prev) => ({ ...prev, [name]: value }));
    }

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  // Form validation for update (less strict than create)
  const validateForm = () => {
    const newErrors = {};

    // For approved administrative approval, validate required fields
    if (existingApproval?.status === "Approved") {
      if (!form.approvalNumber.trim()) {
        newErrors.approvalNumber = 'рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдХреНрд░рдорд╛рдВрдХ рдЖрд╡рд╢реНрдпрдХ рд╣реИ';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleLogout = () => {
    if (window.confirm("рдХреНрдпрд╛ рдЖрдк рд▓реЙрдЧрдЖрдЙрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?")) {
      logout();
      navigate("/");
    }
  };

  const handleCancel = () => {
    navigate(-1);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    // Check authentication using Zustand store
    if (!isAuthenticated || !token) {
      alert("рдЖрдкрдХрд╛ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред");
      navigate("/login");
      return;
    }

    setIsSubmitting(true);

    try {
      // Create FormData for file upload
      const formData = new FormData();

      // Add fields only if they have values (partial update)
      if (form.byGovtDistrictAS.trim()) {
        formData.append("byGovtDistrictAS", form.byGovtDistrictAS);
      }

      if (form.approvalNumber.trim()) {
        formData.append("approvalNumber", form.approvalNumber);
      }

      if (form.remarks.trim()) {
        formData.append("remarks", form.remarks);
      }

      if (form.rejectionReason.trim()) {
        formData.append("rejectionReason", form.rejectionReason);
      }

      // Add document file if selected
      if (form.document) {
        formData.append("document", form.document);
      }

      console.log("ЁЯУд Sending update data to backend:", {
        byGovtDistrictAS: form.byGovtDistrictAS,
        approvalNumber: form.approvalNumber,
        remarks: form.remarks,
        rejectionReason: form.rejectionReason,
        hasDocument: !!form.document
      });

      // PUT API call using axios with FormData
      const response = await axios.put(
        `${BASE_SERVER_URL}/work-proposals/${workId}/administrative-approval`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            "Authorization": `Bearer ${token}`
          },
        }
      );

      // Success handling
      console.log("тЬЕ Administrative approval updated successfully:", response.data);
      alert("рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдкрдбреЗрдЯ рдХреА рдЧрдИ!");

      // Navigate back after success
      setTimeout(() => {
        navigate(-1);
      }, 1500);

    } catch (err) {
      console.error("тЭМ Administrative approval update error:", err);

      // Handle different error scenarios
      if (err.response) {
        const status = err.response.status;
        const errorMessage = err.response.data?.message || "рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ";

        if (status === 401) {
          alert("рдЖрдкрдХрд╛ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред");
          logout();
          navigate("/login");
        } else if (status === 403) {
          alert("рдЖрдкрдХреЛ рдЗрд╕ рдХрд╛рд░реНрдп рдХреЛ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред");
        } else if (status === 404) {
          alert("рдХрд╛рд░реНрдп рдкреНрд░рд╕реНрддрд╛рд╡ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рд╡реИрдз рдХрд╛рд░реНрдп ID рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВред");
        } else if (status === 400) {
          alert(`рдбреЗрдЯрд╛ рддреНрд░реБрдЯрд┐: ${errorMessage}`);
        } else {
          alert(`рддреНрд░реБрдЯрд┐: ${errorMessage}`);
        }
      } else if (err.request) {
        alert("рдиреЗрдЯрд╡рд░реНрдХ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
      } else {
        alert("рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // тЬЕ FIXED: Show authentication error if not authenticated
  if (!isAuthenticated) {
    return (
      <div className="workorder-page">
        <div className="header">
          <TopBar onLogout={onLogout} />
          <div className="subbar">
            <span className="dot" />
            <h2>рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдЕрдкрдбреЗрдЯ</h2>
          </div>
        </div>
        <div className="wrap">
          <section className="panel">
            <div className="p-body" style={{ textAlign: 'center', padding: '50px' }}>
              <i className="fa-solid fa-lock" style={{ fontSize: '24px', marginBottom: '10px', color: 'orange' }}></i>
              <div style={{ color: 'orange', marginBottom: '20px' }}>
                рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдЖрд╡рд╢реНрдпрдХ рд╣реИред рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред
              </div>
              <button className="btn btn-primary" onClick={() => navigate('/login')}>
                <i className="fa-solid fa-sign-in-alt" /> рд▓реЙрдЧрд┐рди рдкреЗрдЬ рдкрд░ рдЬрд╛рдПрдВ
              </button>
            </div>
          </section>
        </div>
      </div>
    );
  }

  // тЬЕ FIXED: Show loading state
  if (isLoading) {
    return (
      <div className="workorder-page">
        <div className="header">
          <TopBar onLogout={onLogout} />
          <div className="subbar">
            <span className="dot" />
            <h2>рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдЕрдкрдбреЗрдЯ - Work ID: {workId}</h2>
          </div>
        </div>
        <div className="wrap">
          <section className="panel">
            <div className="p-body" style={{ textAlign: 'center', padding: '50px' }}>
              <i className="fa-solid fa-spinner fa-spin" style={{ fontSize: '24px', marginBottom: '10px' }}></i>
              <div>рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...</div>
            </div>
          </section>
        </div>
      </div>
    );
  }

  // тЬЕ FIXED: Don't render form until existingApproval is loaded
  if (!existingApproval) {
    return (
      <div className="workorder-page">
        <div className="header">
          <TopBar onLogout={onLogout} />
          <div className="subbar">
            <span className="dot" />
            <h2>рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдЕрдкрдбреЗрдЯ - Work ID: {workId}</h2>
          </div>
        </div>
        <div className="wrap">
          <section className="panel">
            <div className="p-body" style={{ textAlign: 'center', padding: '50px' }}>
              <i className="fa-solid fa-exclamation-triangle" style={{ fontSize: '24px', marginBottom: '10px', color: 'orange' }}></i>
              <div>рдбреЗрдЯрд╛ рд▓реЛрдб рдирд╣реАрдВ рд╣реЛ рд╕рдХрд╛</div>
            </div>
          </section>
        </div>
      </div>
    );
  }

  return (
    <div className="workorder-page">
      {/* Header */}
      <div className="header">
        <TopBar onLogout={onLogout} />
        <div className="subbar">
          <span className="dot" />
          <h2>рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдЕрдкрдбреЗрдЯ - Work ID: {workId}</h2>
        </div>
      </div>

      {/* Form Card */}
      <div className="wrap">
        <section className="panel">
          <div className="panel-header">
            <h3>
              рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдЕрдкрдбреЗрдЯ
            </h3>
          </div>

          <form className="p-body" onSubmit={handleSubmit}>
            {/* Show form for approved status or if no specific status */}
            {(!existingApproval.status || existingApproval.status === 'Approved') && (
              <>
                <div className="form-grid">
                  <div className="form-group">
                    <label className="form-label">
                      рд╕рд░рдХрд╛рд░/рдЬрд┐рд▓рд╛ рджреНрд╡рд╛рд░рд╛ рдП.рдПрд╕
                    </label>
                    <input
                      type="text"
                      name="byGovtDistrictAS"
                      className={`form-input ${errors.byGovtDistrictAS ? 'error' : ''}`}
                      placeholder="Commissioner, Raipur Municipal Corporation"
                      value={form.byGovtDistrictAS}
                      onChange={handleChange}
                      disabled={isSubmitting}
                    />
                    {errors.byGovtDistrictAS && (
                      <span className="error-text">{errors.byGovtDistrictAS}</span>
                    )}
                  </div>

                  <div className="form-group">
                    <label className="form-label">
                      рдкреНрд░рд╢рд╛рд╕рдХреАрдп рд╕реНрд╡реАрдХреГрддрд┐ рдХреНрд░рдорд╛рдВрдХ <span className="req">*</span>
                    </label>
                    <input
                      type="text"
                      name="approvalNumber"
                      className={`form-input ${errors.approvalNumber ? 'error' : ''}`}
                      placeholder="AA-RMC-2025-URBAN-47"
                      value={form.approvalNumber}
                      onChange={handleChange}
                      disabled={isSubmitting}
                    />
                    {errors.approvalNumber && (
                      <span className="error-text">{errors.approvalNumber}</span>
                    )}
                  </div>
                </div>

                <div className="form-group full">
                  <label className="form-label">
                    рдЯрд┐рдкреНрдкрдгреА
                  </label>
                  <textarea
                    name="remarks"
                    className={`form-input textarea ${errors.remarks ? 'error' : ''}`}
                    placeholder="рдЕрдкрдбреЗрдЯреЗрдб рдЯрд┐рдкреНрдкрдгреА рджрд░реНрдЬ рдХрд░реЗрдВ..."
                    rows={5}
                    value={form.remarks}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                  {errors.remarks && (
                    <span className="error-text">{errors.remarks}</span>
                  )}
                </div>
              </>
            )}

            {existingApproval.status === 'Rejected' && (
              <>
                <div className="form-group full">
                  <label className="form-label">
                    рдЕрд╕реНрд╡реАрдХреГрддрд┐ рдХрд╛рд░рдг
                  </label>
                  <textarea
                    name="rejectionReason"
                    className={`form-input textarea ${errors.rejectionReason ? 'error' : ''}`}
                    placeholder="рдЕрдкрдбреЗрдЯреЗрдб рдЕрд╕реНрд╡реАрдХреГрддрд┐ рдХрд╛рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВ..."
                    rows={4}
                    value={form.rejectionReason}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                  {errors.rejectionReason && (
                    <span className="error-text">{errors.rejectionReason}</span>
                  )}
                </div>

                <div className="form-group full">
                  <label className="form-label">
                    рдЯрд┐рдкреНрдкрдгреА
                  </label>
                  <textarea
                    name="remarks"
                    className={`form-input textarea ${errors.remarks ? 'error' : ''}`}
                    placeholder="рдЕрдкрдбреЗрдЯреЗрдб рдЯрд┐рдкреНрдкрдгреА рджрд░реНрдЬ рдХрд░реЗрдВ..."
                    rows={3}
                    value={form.remarks}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                  {errors.remarks && (
                    <span className="error-text">{errors.remarks}</span>
                  )}
                </div>
              </>
            )}

            {/* Document Upload - Optional for update */}
            <div className="form-group file-input-wrapper">
              <label className="form-label">
                рдирдпрд╛ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕рдВрд▓рдЧреНрди рдХрд░реЗрдВ (рд╡реИрдХрд▓реНрдкрд┐рдХ)
              </label>
              <input
                type="file"
                name="document"
                id="documentUpload"
                className="file-input"
                accept=".pdf,.doc,.docx,.jpg,.png"
                onChange={handleChange}
              />
              <label htmlFor="documentUpload" className="custom-file-label">
                рдлрд╝рд╛рдЗрд▓ рдЪреБрдиреЗрдВ
              </label>
              <span className="file-name">
                {form.document ? form.document.name : "рдХреЛрдИ рдирдИ рдлрд╝рд╛рдЗрд▓ рдЪрдпрдирд┐рдд рдирд╣реАрдВ"}
              </span>
            </div>

            <div className="form-actions">
              <button 
                type="submit" 
                className="btn btn-primary"
                disabled={isSubmitting}
              >
                {isSubmitting ? "рдЕрдкрдбреЗрдЯ рд╣реЛ рд░рд╣рд╛ рд╣реИ..." : "Update Administrative Approval"}
              </button>
              <button
                type="button"
                className="btn btn-ghost"
                onClick={handleCancel}
                disabled={isSubmitting}
              >
                Cancel
              </button>
            </div>
          </form>
        </section>
      </div>
    </div>
  );
}
